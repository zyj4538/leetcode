给你二叉树的根节点 root ，返回其节点值的 锯齿形层序遍历 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。



 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>>vec;
        if(root==nullptr)
            return vec;
        queue<TreeNode*>Q;
        Q.push(root);
        bool orderleft=true;

        while(!Q.empty())
        {
            int sz=Q.size();
            deque<int>deq;

            while(sz>0)
            {
                TreeNode* t=Q.front();
                Q.pop();

                if(orderleft)
                    deq.push_back(t->val);
                else
                    deq.push_front(t->val);

                if(t->left)
                    Q.push(t->left);
                if(t->right)
                    Q.push(t->right);
                sz--;
            }
            vector<int>tvec;
            while(!deq.empty())
            {
                int n = deq.front();
                deq.pop_front();
                tvec.push_back(n);
            }
            vec.push_back(tvec);
            orderleft=!orderleft;
        }
        return vec;
    }
};