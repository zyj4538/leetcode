给定一个 m x n 整数矩阵 matrix ，找出其中 最长递增路径 的长度。

对于每个单元格，你可以往上，下，左，右四个方向移动。 你 不能 在 对角线 方向上移动或移动到 边界外（即不允许环绕）。

 

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/longest-increasing-path-in-a-matrix
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
    int m=matrix.size(),n=matrix[0].size();
    vector<vector<vector<pair<int,int>>>>grid1(m,vector<vector<pair<int,int>>>(n));
    vector<vector<vector<pair<int,int>>>>grid2(m,vector<vector<pair<int,int>>>(n));
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(i+1<m){
            if(matrix[i+1][j]<matrix[i][j]){
                grid1[i][j].push_back({i+1,j});
                grid2[i+1][j].push_back({i,j});
            }
            if(matrix[i+1][j]>matrix[i][j]){
                grid2[i][j].push_back({i+1,j});
                grid1[i+1][j].push_back({i,j});
            }
            }
            if(j+1<n){
            if(matrix[i][j+1]<matrix[i][j]){
                grid1[i][j].push_back({i,j+1});
                grid2[i][j+1].push_back({i,j});
            }
            if(matrix[i][j+1]>matrix[i][j]){
                grid2[i][j].push_back({i,j+1});
                grid1[i][j+1].push_back({i,j});
            }
            }
        }
    }
    queue<pair<int,int>>q;
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(grid1[i][j].size()==0){
                q.push({i,j});
            }
        }
    }
    unordered_set<int>set;
    int ans=0;
    while(!q.empty()){
        ans++;
        int s=q.size();
        for(int i=0;i<s;i++){
            auto p=q.front();
            q.pop();
            for(auto it:grid2[p.first][p.second]){
            if(!set.count(it.first*1000+it.second)){
            q.push(it);
            set.insert(it.first*1000+it.second);
            }
            }
        }
        set.clear();
    }
    return ans;
    }
};
