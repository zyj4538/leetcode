给你一个链表数组，每个链表都已经按升序排列。

请你将所有链表合并到一个升序链表中，返回合并后的链表。


代码：
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode *prehead=new ListNode(-1);
        ListNode *head = prehead;

        while(list1!=nullptr && list2!=nullptr){
            if(list1->val < list2->val){
                head->next=list1;
                list1=list1->next;
            }
            else {
                head->next=list2;
                list2=list2->next;
            }
            head=head->next;
        }
        head->next=list1==nullptr?list2:list1;
        return prehead->next;
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode *ans = nullptr;
        for (size_t i = 0; i < lists.size(); ++i) {
            ans = mergeTwoLists(ans, lists[i]);
        }
        return ans;
    }
};


----------------
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode *prehead=new ListNode(-1);
        ListNode *head = prehead;

        while(list1!=nullptr && list2!=nullptr){
            if(list1->val < list2->val){
                head->next=list1;
                list1=list1->next;
            }
            else {
                head->next=list2;
                list2=list2->next;
            }
            head=head->next;
        }
        head->next=list1==nullptr?list2:list1;
        return prehead->next;
    }

    ListNode* merge(vector <ListNode*> &lists, int l, int r) {
        if (l == r) return lists[l];
        if (l > r) return nullptr;
        int mid = (l + r) >> 1;
        return mergeTwoLists(merge(lists, l, mid), merge(lists, mid + 1, r));
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        return merge(lists, 0, lists.size() - 1);
    }
};



---------------
