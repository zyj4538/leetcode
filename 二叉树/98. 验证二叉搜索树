给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。


代码：
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        stack<TreeNode*> stack;
        long long inorder = (long long)INT_MIN - 1;

        while (!stack.empty() || root != nullptr) {
            while (root != nullptr) {
                stack.push(root);
                root = root -> left;
            }
            root = stack.top();
            stack.pop();
            // 如果中序遍历得到的节点的值小于等于前一个 inorder，说明不是二叉搜索树
            if (root -> val <= inorder) {
                return false;
            }
            inorder = root -> val;
            root = root -> right;
        }
        return true;
    }
};
--------
class Solution {
public:
    bool helper(TreeNode* root, long long lower, long long upper) {
        if (root == nullptr)
			return true;

        if (root -> val <= lower || root -> val >= upper)  //=也不行
			return false;

        return helper(root -> left, lower, root -> val) && helper(root -> right, root -> val, upper);
    }

    bool isValidBST(TreeNode* root) {
        return helper(root, LONG_MIN, LONG_MAX);
    }

};
----------------
class Solution {
public:
    int min=INT_MIN;
    bool isValidBST(TreeNode* root) {
        // write code here
        if(root==nullptr)return true;
        if(!isValidBST(root->left)){
            return false;
        }
        if(min>=root->val){
            return false;
        }else{
            min=root->val;
        }
        if(!isValidBST(root->right)){
            return false;
        }
        return true;
    }
};